{"mappings":"ICEI,E,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SAEJ,MAAM,EAAc,CAChB,MAAO,CACH,CAAE,KAAM,CAAE,GAAI,KAAM,KAAM,IAAK,CAAE,EACjC,CAAE,KAAM,CAAE,GAAI,KAAM,KAAM,IAAK,CAAE,EACjC,CAAE,KAAM,CAAE,GAAI,IAAK,KAAM,GAAI,CAAE,EAC/B,CAAE,KAAM,CAAE,GAAI,IAAK,KAAM,GAAI,CAAE,EAC/B,CAAE,KAAM,CAAE,GAAI,IAAK,KAAM,GAAI,CAAE,EAC/B,CAAE,KAAM,CAAE,GAAI,IAAK,KAAM,GAAI,CAAE,EAC/B,CAAE,KAAM,CAAE,GAAI,IAAK,KAAM,GAAI,CAAE,EAClC,CACD,MAAO,CACH,CACI,KAAM,CACF,GAAI,MACJ,OAAQ,KACR,OAAQ,IACR,MAAO,UACP,OAAQ,CACZ,CACJ,EACA,CACI,KAAM,CACF,GAAI,KACJ,OAAQ,IACR,OAAQ,IACR,MAAO,SACP,OAAQ,CACZ,CACJ,EACA,CACI,KAAM,CACF,GAAI,MACJ,OAAQ,IACR,OAAQ,KACR,MAAO,UACP,OAAQ,CACZ,CACJ,EACA,CACI,KAAM,CACF,GAAI,MACJ,OAAQ,KACR,OAAQ,IACR,MAAO,UACP,OAAQ,CACZ,CACJ,EACA,CACI,KAAM,CACF,GAAI,KACJ,OAAQ,IACR,OAAQ,IACR,MAAO,SACP,OAAQ,CACZ,CACJ,EACA,CACI,KAAM,CACF,GAAI,KACJ,OAAQ,IACR,OAAQ,IACR,MAAO,SACP,OAAQ,CACZ,CACJ,EACA,CACI,KAAM,CACF,GAAI,MACJ,OAAQ,IACR,OAAQ,KACR,MAAO,UACP,OAAQ,CACZ,CACJ,EACH,AACL,EAEA,SAAS,cAAc,CAAC,aAAa,gBAAgB,CAAC,iBAAkB,KACpE,IAAM,EAAY,SAAS,cAAc,CAAC,cAOrC,GAED,AADA,CAAA,EAAS,IAAI,WAAW,EAPZ,CACZ,KAAM,OACN,MAAO,CAAC,OAAQ,OAAO,AAC3B,EAII,EACO,GAAG,CAAC,EAEnB,GAEA,SAAS,cAAc,CAAC,kBAAkB,gBAAgB,CAAC,QAAS,KAEhE,AADkB,IAAI,UAAU,KAAK,CAAC,SAAS,cAAc,CAAC,cACpD,IAAI,EAClB,GAEA,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,QAAS,KAI7D,AADkB,IAAI,UAAU,KAAK,CAAC,SAAS,cAAc,CAAC,cACpD,IAAI,EAClB,GAEA,SAAS,cAAc,CAAC,kBAAkB,gBAAgB,CAAC,QAAS,KAEhE,GAAI,CACA,IAAM,EAAa,EAAO,GAAG,GAC7B,AAAA,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,GAMxB,AAH0B,UAAU,KAAK,CAAC,WAAW,CACjD,SAAS,cAAc,CAAC,cAEV,IAAI,EAC1B,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,6BAA8B,EAChD,CACJ","sources":["<anon>","src/scripts/jseditor.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireaed0\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireaed0\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $5qD1E = parcelRequire(\"5qD1E\");\nlet $b1d71c32751d9525$var$editor; // Global variable to store the editor instance\nconst $b1d71c32751d9525$var$exampleJson = {\n    nodes: [\n        {\n            data: {\n                id: \"S1\",\n                name: \"S1\"\n            }\n        },\n        {\n            data: {\n                id: \"S2\",\n                name: \"S2\"\n            }\n        },\n        {\n            data: {\n                id: \"A\",\n                name: \"A\"\n            }\n        },\n        {\n            data: {\n                id: \"B\",\n                name: \"B\"\n            }\n        },\n        {\n            data: {\n                id: \"C\",\n                name: \"C\"\n            }\n        },\n        {\n            data: {\n                id: \"D\",\n                name: \"D\"\n            }\n        },\n        {\n            data: {\n                id: \"E\",\n                name: \"E\"\n            }\n        }\n    ],\n    edges: [\n        {\n            data: {\n                id: \"S1A\",\n                source: \"S1\",\n                target: \"A\",\n                label: \"S1 to A\",\n                weight: 2\n            }\n        },\n        {\n            data: {\n                id: \"AB\",\n                source: \"A\",\n                target: \"B\",\n                label: \"A to B\",\n                weight: 3\n            }\n        },\n        {\n            data: {\n                id: \"BS2\",\n                source: \"B\",\n                target: \"S2\",\n                label: \"B to S2\",\n                weight: 4\n            }\n        },\n        {\n            data: {\n                id: \"S1C\",\n                source: \"S1\",\n                target: \"C\",\n                label: \"S1 to C\",\n                weight: 5\n            }\n        },\n        {\n            data: {\n                id: \"CD\",\n                source: \"C\",\n                target: \"D\",\n                label: \"C to D\",\n                weight: 1\n            }\n        },\n        {\n            data: {\n                id: \"DE\",\n                source: \"D\",\n                target: \"E\",\n                label: \"D to E\",\n                weight: 3\n            }\n        },\n        {\n            data: {\n                id: \"ES2\",\n                source: \"E\",\n                target: \"S2\",\n                label: \"E to S2\",\n                weight: 2\n            }\n        }\n    ]\n};\ndocument.getElementById(\"jsonModal\").addEventListener(\"shown.bs.modal\", ()=>{\n    const container = document.getElementById(\"jsoneditor\");\n    const options = {\n        mode: \"code\",\n        modes: [\n            \"code\",\n            \"tree\"\n        ]\n    };\n    // Only create a new editor if one doesn't already exist\n    if (!$b1d71c32751d9525$var$editor) {\n        $b1d71c32751d9525$var$editor = new JSONEditor(container, options);\n        $b1d71c32751d9525$var$editor.set($b1d71c32751d9525$var$exampleJson); // Set example data\n    }\n});\ndocument.getElementById(\"openJsonEditor\").addEventListener(\"click\", ()=>{\n    const jsonModal = new bootstrap.Modal(document.getElementById(\"jsonModal\"));\n    jsonModal.show();\n});\ndocument.getElementById(\"closeEditor\").addEventListener(\"click\", ()=>{\n    // You can add any cleanup or reset actions here, if needed.\n    // For now, just close the modal.\n    const jsonModal = new bootstrap.Modal(document.getElementById(\"jsonModal\"));\n    jsonModal.hide();\n});\ndocument.getElementById(\"saveEditedJson\").addEventListener(\"click\", ()=>{\n    // Here, you can get the edited JSON data from the JSONEditor and save or process it.\n    try {\n        const editedData = $b1d71c32751d9525$var$editor.get();\n        (0, $5qD1E.loadGraphDataFromServer)(editedData);\n        // Close the modal\n        const jsonModalInstance = bootstrap.Modal.getInstance(document.getElementById(\"jsonModal\"));\n        jsonModalInstance.hide();\n    } catch (error) {\n        console.error(\"Error parsing edited JSON:\", error);\n    }\n});\n\n\n//# sourceMappingURL=app.9fd05064.js.map\n","import { loadGraphDataFromServer } from \"./graph.js\";\n\nlet editor; // Global variable to store the editor instance\n\nconst exampleJson = {\n    nodes: [\n        { data: { id: \"S1\", name: \"S1\" } },\n        { data: { id: \"S2\", name: \"S2\" } },\n        { data: { id: \"A\", name: \"A\" } },\n        { data: { id: \"B\", name: \"B\" } },\n        { data: { id: \"C\", name: \"C\" } },\n        { data: { id: \"D\", name: \"D\" } },\n        { data: { id: \"E\", name: \"E\" } },\n    ],\n    edges: [\n        {\n            data: {\n                id: \"S1A\",\n                source: \"S1\",\n                target: \"A\",\n                label: \"S1 to A\",\n                weight: 2,\n            },\n        },\n        {\n            data: {\n                id: \"AB\",\n                source: \"A\",\n                target: \"B\",\n                label: \"A to B\",\n                weight: 3,\n            },\n        },\n        {\n            data: {\n                id: \"BS2\",\n                source: \"B\",\n                target: \"S2\",\n                label: \"B to S2\",\n                weight: 4,\n            },\n        },\n        {\n            data: {\n                id: \"S1C\",\n                source: \"S1\",\n                target: \"C\",\n                label: \"S1 to C\",\n                weight: 5,\n            },\n        },\n        {\n            data: {\n                id: \"CD\",\n                source: \"C\",\n                target: \"D\",\n                label: \"C to D\",\n                weight: 1,\n            },\n        },\n        {\n            data: {\n                id: \"DE\",\n                source: \"D\",\n                target: \"E\",\n                label: \"D to E\",\n                weight: 3,\n            },\n        },\n        {\n            data: {\n                id: \"ES2\",\n                source: \"E\",\n                target: \"S2\",\n                label: \"E to S2\",\n                weight: 2,\n            },\n        },\n    ],\n};\n\ndocument.getElementById(\"jsonModal\").addEventListener(\"shown.bs.modal\", () => {\n    const container = document.getElementById(\"jsoneditor\");\n    const options = {\n        mode: \"code\",\n        modes: [\"code\", \"tree\"],\n    };\n\n    // Only create a new editor if one doesn't already exist\n    if (!editor) {\n        editor = new JSONEditor(container, options);\n        editor.set(exampleJson); // Set example data\n    }\n});\n\ndocument.getElementById(\"openJsonEditor\").addEventListener(\"click\", () => {\n    const jsonModal = new bootstrap.Modal(document.getElementById(\"jsonModal\"));\n    jsonModal.show();\n});\n\ndocument.getElementById(\"closeEditor\").addEventListener(\"click\", () => {\n    // You can add any cleanup or reset actions here, if needed.\n    // For now, just close the modal.\n    const jsonModal = new bootstrap.Modal(document.getElementById(\"jsonModal\"));\n    jsonModal.hide();\n});\n\ndocument.getElementById(\"saveEditedJson\").addEventListener(\"click\", () => {\n    // Here, you can get the edited JSON data from the JSONEditor and save or process it.\n    try {\n        const editedData = editor.get();\n        loadGraphDataFromServer(editedData);\n\n        // Close the modal\n        const jsonModalInstance = bootstrap.Modal.getInstance(\n            document.getElementById(\"jsonModal\"),\n        );\n        jsonModalInstance.hide();\n    } catch (error) {\n        console.error(\"Error parsing edited JSON:\", error);\n    }\n});\n"],"names":["$b1d71c32751d9525$var$editor","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$5qD1E","$b1d71c32751d9525$var$exampleJson","nodes","data","name","edges","source","target","label","weight","document","getElementById","addEventListener","container","JSONEditor","mode","modes","set","jsonModal","bootstrap","Modal","show","hide","editedData","get","loadGraphDataFromServer","jsonModalInstance","getInstance","error","console"],"version":3,"file":"app.9fd05064.js.map"}